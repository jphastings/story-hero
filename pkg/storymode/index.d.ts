// Code generated by tygo. DO NOT EDIT.
declare global {
  // Allows access to the story definition (treat as read-only)
  const story: Story;
  // Plays for the song with the given ID
  function plays(id: MD5Hash): SongPlay | undefined
  // A convenience method that returns the group from the current story with the given title. Will raise an error if the group doesn't exist
  function group(title: string): Group
  // Configure this story to use state
  function useState<T>(updater: (previousState: T | null) => T): () => T
}
export enum Difficulty {
  Easy = 0,
  Medium,
  Hard,
  Expert,
}
export enum Instrument {

}
type PerInstrumentScore = Record<Instrument, Score>
type UnlockFunc = (songID: MD5Hash) => boolean
type SongCompleteFunc = (songPlay: SongPlay) => void

//////////
// source: types.go

export interface Story {
  title: string;
  groups: Group[];
}
export interface Group {
  title: string;
  songs: MD5Hash[];
  isUnlocked?: UnlockFunc;
}
export interface SongPlay {
  id: MD5Hash;
  playCount: number /* uint */;
  scores: PerInstrumentScore;
}
export interface Score {
  difficulty: Difficulty;
  percentage?: number;
  stars: number /* uint */;
  score: number /* uint */;
}
export type MD5Hash = string;
