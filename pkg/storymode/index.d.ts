// Code generated by tygo. DO NOT EDIT.
declare global {
  // Allows access to the story definition (treat as read-only)
  const story: Story;
  
  // Details of the (best) plays for the song with the given ID
  function plays(id: MD5Hash): SongPlay | undefined
  
  // A convenience method that returns the group from the current story with the given title.
  // Will raise an error if the group doesn't exist.
  function group(title: string): Group

  // A convenience method that returns the total stars across all songs in all groups in this story
  function totalStars(): number
  // A convenience method that returns the total score across all songs in all groups in this story
  function totalScore(): number
  // A convenience method that returns the number of songs in this story with a score equal to (only: true) or equal/greater than (only: false) the number provided
  function countMeetingScore(score: number, only: boolean): number
  // A convenience method that returns the number of songs in this story with a percentage equal to (only: true) or equal/greater than (only: false) the number provided
  function countMeetingPercentage(score: number, only: boolean): number
  // A convenience method that returns the number of songs in this story with stars equal to (only: true) or equal/greater than (only: false) the number provided
  function countMeetingStars(stars: number, only: boolean): number
  
  // Configure this story to use state
  function useState<T>(init: (storedState: T | null) => T): [() => T, ((updater: (previousState: T) => T) => void)]

  export enum Difficulty {
    Easy = 0,
    Medium = 1,
    Hard = 2,
    Expert = 3,
  }

  export enum Instrument {

  }

  type PerInstrumentScore = Record<Instrument, Score>
  // A function which declares whether a given song is unlocked
  type UnlockFunc = (songID: MD5Hash) => boolean
  // A function which defines an action on a song, and whether that action can currently be performed
  type ActionFunc = (songID: MD5Hash) => boolean | (() => void)
}

//////////
// source: types.go

export interface Story {
  title: string;
  groups: Group[];
}
export interface Group {
  title: string;
  songs: MD5Hash[];
  isUnlocked?: UnlockFunc;
  lockedMessage?: string;
  showLockedSongs?: boolean;
  unlockAction?: ActionFunc;
}
export interface SongPlay {
  id: MD5Hash;
  playCount: number /* uint */;
  scores: PerInstrumentScore;
}
export interface Score {
  difficulty: Difficulty;
  percentage?: number;
  stars: number /* uint */;
  score: number /* uint */;
}
export type MD5Hash = string;
