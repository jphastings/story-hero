// Code generated by tygo. DO NOT EDIT.
declare global {
  // Define the details of your story
  function defineStory(story: Story): void

  // Access to your story, once its been defined
  function story(): Story
          
  // Configure this story to use state
  // If your state uses any convenience methods, make sure you've called storyDefinition first
  function useState<T>(init: (storedState: T | null) => T): [() => T, ((updater: (previousState: T) => T) => void)]

  // Details of the (best) plays for the song with the given ID
  function plays(id: MD5Hash): SongPlay | undefined

  export enum Difficulty {
    Easy = 0,
    Medium = 1,
    Hard = 2,
    Expert = 3,
  }

  export enum Instrument {

  }

  type PerInstrumentScore = Record<Instrument, Score>

  // A function which checks some aspect of the story, and judges whether the bar has been met or not
  type StoryJudge = (...any) => UnlockFunc
  // A function which checks all the songs provided, and judges whether the bar has been met or not
  type SongsJudge = (songIDs?: Array<MD5Hash>) => boolean
  

  // A function which declares whether a given song is unlocked
  type UnlockFunc = (this: Group, songID: MD5Hash) => boolean
  // A function which creates an UnlockFunc; useful for making reusable & configurable unlock functions
  type UnlockFuncFactory = (...any) => UnlockFunc

  // A function which defines an action on a song, and whether that action can currently be performed
  type ActionFunc = (songID: MD5Hash) => boolean | (() => void)

  /* From implementations.ts */
  function allSongs(): Array<MD5Hash>
  function bestAmount(songID: MD5Hash, mapper: (Score) => number): number

  const allCompleted: SongsJudge
  function enoughStars(stars: number): UnlockFunc

  function previousGroupMeets(judge: SongsJudge): UnlockFunc

  function lastAreEncores(n: number, encoreJudge: SongsJudge, others?: UnlockFunc): UnlockFunc

  // A convenience method that returns the number of songs with best stars (across instruments) equal to (exactly: true) or equal/greater than (exactly: false) the number provided
  function countMeeting(needed: number, mapper: (Score) => number, exactly?: boolean): number

  function ofStars(s: Score): number
  function ofPercentage(s: Score): number
  function ofScore(s: Score): number
}

//////////
// source: types.go

export interface Story {
  title: string;
  groups: Group[];
}
export interface Group {
  title: string;
  songs: MD5Hash[];
  isUnlocked?: UnlockFunc;
  lockedMessage?: string;
  showLockedSongs?: boolean;
  unlockAction?: ActionFunc;
}
export interface SongPlay {
  id: MD5Hash;
  playCount: number /* uint */;
  scores: PerInstrumentScore;
}
export interface Score {
  difficulty: Difficulty;
  percentage: number;
  speed: number;
  stars: number /* uint */;
  score: number /* uint */;
}
export type MD5Hash = string;
export interface Song {
  ID: MD5Hash;
  Path: string;
  Title: string;
  Artist: string;
}
